# AWS SAM template for deploying Vendor Statements Flask App to Lambda
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM Template for Vendor Statements Flask Application with S3 Storage'

Parameters:
  StageName:
    Type: String
    Default: prod
    Description: API Gateway stage name
  BucketName:
    Type: String
    Description: S3 bucket name for file storage
    Default: vendor-statements-procurementiq-prod
  AzureOpenAIEndpoint:
    Type: String
    Description: Azure OpenAI endpoint URL
    Default: https://procurementiq.openai.azure.com/
  AzureOpenAIKey:
    Type: String
    Description: Azure OpenAI API key
    NoEcho: true
  AzureOpenAIDeployment:
    Type: String
    Description: Azure OpenAI deployment name
    Default: gpt-4o

Globals:
  Function:
    Timeout: 300  # 5 minutes for file processing
    MemorySize: 2048  # Increased for AI processing and file handling
    Environment:
      Variables:
        STAGE_PREFIX: !Sub '/${StageName}'
        AWS_S3_BUCKET_NAME: !Ref BucketName
        AWS_REGION: !Ref AWS::Region
        STORAGE_MODE: s3
        S3_TEMPLATES_PREFIX: templates/
        S3_UPLOADS_PREFIX: uploads/
        S3_PROCESSED_PREFIX: processed/
        S3_CACHE_PREFIX: cache/
        MAX_FILE_SIZE: 50
        PRESIGNED_URL_EXPIRATION: 3600
        AZURE_OAI_ENDPOINT: !Ref AzureOpenAIEndpoint
        AZURE_OAI_KEY: !Ref AzureOpenAIKey
        AZURE_OAI_DEPLOYMENT_NAME: !Ref AzureOpenAIDeployment
        AZURE_OAI_API_VERSION: 2024-12-01-preview
        LAMBDA_ENVIRONMENT: true

Resources:
  VendorStatementsFunction:
    Type: 'AWS::Serverless::Function'
    Metadata:
      BuildMethod: python3.11
      BuildProperties:
        RequirementsFile: requirements-lambda.txt
    Properties:
      CodeUri: .
      Handler: lambda_handler.handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref VendorStatementsApi
            Path: /{proxy+}
            Method: ANY
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref VendorStatementsApi
            Path: /
            Method: ANY
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
        - Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub "${StorageBucket}/*"
              - !Ref StorageBucket
        - Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"

  VendorStatementsApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref StageName
      BinaryMediaTypes:
        - '*/*'  # Handle all binary data including file uploads
        - 'multipart/form-data'
        - 'application/octet-stream'
        - 'image/*'
        - 'application/pdf'
        - 'application/vnd.ms-excel'
        - 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Origin,X-Requested-With'"
        AllowOrigin: "'*'"  # Configure for specific domains in production
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

  StorageBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'  # Configure for specific domains in production
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: ArchiveOldUploads
            Status: Enabled
            Prefix: uploads/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER

  # CloudWatch Log Group for better monitoring
  VendorStatementsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${VendorStatementsFunction}'
      RetentionInDays: 14

Outputs:
  ApiUrl:
    Description: 'API Gateway URL for Vendor Statements Application'
    Value: !Sub 'https://${VendorStatementsApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  S3BucketName:
    Description: 'S3 bucket for file and template storage'
    Value: !Ref StorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  
  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt VendorStatementsFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
